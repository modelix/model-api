import org.apache.tools.ant.taskdefs.condition.Os

plugins {
    id 'maven-publish'
    id 'org.jetbrains.kotlin.multiplatform' version '1.4.31'
    id 'com.diffplug.gradle.spotless' version '4.5.1'
    id 'org.jlleitschuh.gradle.ktlint' version '9.3.0'
    id 'java-library'
    id 'jacoco'
}

configurations {
    ktlint
}

group 'org.modelix'

def versionMajor = 2021
def versionMinor = 3

// Compute version number suffix:
// - if BUILD_NUMBER env var is set (by TeamCity), use `.<build-number>.<git-hash>` where git hash is abbreviated
//   to 7 chars.
// - otherwise use -SNAPSHOT
def suffix = {
    def buildNumberStr = System.getenv("BUILD_NUMBER")
    if (!buildNumberStr) {
        return "-SNAPSHOT"
    } else {
        def gitCommitHash = getCommandOutput("git rev-parse --short=7 HEAD")
        return ".$buildNumberStr.$gitCommitHash"
    }
}()

version "$versionMajor.$versionMinor$suffix"

private static String getCommandOutput(String command) {
    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
        command = 'cmd /c ' + command
    }
    return command.execute().in.text.trim()
}

task setTeamCityBuildNumber {
    doLast {
        println("##teamcity[buildNumber '$version']")
    }
}


repositories {
    maven { url "https://repo.maven.apache.org/maven2" }
    mavenCentral()
    mavenLocal()
    maven { url 'https://projects.itemis.de/nexus/content/groups/OS/' }                
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions {
        jvmTarget = "11"
    }
}

ktlint {
    disabledRules = ["no-wildcard-imports"]
}

check.dependsOn ktlintCheck

kotlin {
    jvm()
    js {
        //browser {}
        nodejs {
            testTask {
                useMocha {
                    timeout = 10000
                }
            }
        }
    }
    sourceSets {
        commonMain {
            dependencies {
                implementation kotlin('stdlib-common')
            }
        }
        commonTest {
            dependencies {
                implementation kotlin('test-common')
                implementation kotlin('test-annotations-common')
            }
        }
        jvmMain {
            dependencies {
                implementation kotlin('stdlib-jdk8')
                implementation group: 'log4j', name: 'log4j', version:'1.2.17'
            }
        }
        jvmTest {
            dependencies {
                implementation kotlin('test')
                implementation kotlin('test-junit')
            }
        }
        jsMain {
            dependencies {
                implementation kotlin('stdlib-js')
            }
        }
        jsTest {
            dependencies {
                implementation kotlin('test-js')
            }
        }
    }
}

tasks.jacocoTestReport {

    classDirectories.setFrom("${buildDir}/classes/kotlin/jvm/")
    sourceDirectories.setFrom(files("src/commonMain/kotlin", "src/jvmMain/kotlin"))

    executionData.setFrom(files("${buildDir}/jacoco/jvmTest.exec"))

    reports {
        xml.enabled true
        html.enabled true
    }
}

spotless {
    kotlin {
        licenseHeader '/*\n' +
                ' * Licensed under the Apache License, Version 2.0 (the "License");\n' +
                ' * you may not use this file except in compliance with the License.\n' +
                ' * You may obtain a copy of the License at\n' +
                ' *\n' +
                ' *  http://www.apache.org/licenses/LICENSE-2.0\n' +
                ' *\n' +
                ' * Unless required by applicable law or agreed to in writing,\n' +
                ' * software distributed under the License is distributed on an\n' +
                ' * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n' +
                ' * KIND, either express or implied.  See the License for the\n' +
                ' * specific language governing permissions and limitations\n' +
                ' * under the License. \n' +
                ' */\n' +
                '\n'
    }
}

ext.releaseRepository = 'https://projects.itemis.de/nexus/content/repositories/mbeddr'
ext.snapshotRepository = 'https://projects.itemis.de/nexus/content/repositories/mbeddr_snapshots'
ext.publishingRepository = version.toString().endsWith("-SNAPSHOT") ? snapshotRepository : releaseRepository

publishing {
    repositories {
        maven {
            url rootProject.publishingRepository
            if (rootProject.hasProperty('nexusUsername')) {
                credentials {
                    username rootProject.nexusUsername
                    password rootProject.nexusPassword
                }
            }
        }
        maven {
            name = "GitHubPackages"
            url = "https://maven.pkg.github.com/modelix/model-api"
            if (rootProject.hasProperty("gpr.token")) {
                credentials {
                    username = rootProject.findProperty("gpr.user")
                    password = rootProject.findProperty("gpr.token")
                }
            }
        }
    }
}