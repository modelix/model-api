import org.apache.tools.ant.taskdefs.condition.Os

plugins {
    id 'maven-publish'
    id 'org.jetbrains.kotlin.multiplatform' version '1.4.31'
    id 'com.diffplug.gradle.spotless' version '4.5.1'
    id 'org.jlleitschuh.gradle.ktlint' version '9.3.0'
    id 'java-library'
    id 'jacoco'
    id 'com.palantir.git-version' version '0.13.0'
}

configurations {
    ktlint
}

group 'org.modelix'
description = "API to access models stored in Modelix"

version = computeVersion()
println("Version: $version")

def computeVersion() {
    def versionFile = file("version.txt")
    def version = versionFile.exists() ? versionFile.text.trim() : gitVersion()
    if (!"true".equals(project.findProperty("ciBuild"))) {
        version = "$version-SNAPSHOT"
    }
    return version
}

repositories {
    mavenCentral()
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions {
        jvmTarget = "11"
    }
}

ktlint {
    disabledRules = ["no-wildcard-imports"]
}

check.dependsOn ktlintCheck

kotlin {
    jvm()
    js {
        //browser {}
        nodejs {
            testTask {
                useMocha {
                    timeout = 10000
                }
            }
        }
    }
    sourceSets {
        commonMain {
            dependencies {
                implementation kotlin('stdlib-common')
            }
        }
        commonTest {
            dependencies {
                implementation kotlin('test-common')
                implementation kotlin('test-annotations-common')
            }
        }
        jvmMain {
            dependencies {
                implementation kotlin('stdlib-jdk8')
                implementation group: 'log4j', name: 'log4j', version:'1.2.17'
            }
        }
        jvmTest {
            dependencies {
                implementation kotlin('test')
                implementation kotlin('test-junit')
            }
        }
        jsMain {
            dependencies {
                implementation kotlin('stdlib-js')
            }
        }
        jsTest {
            dependencies {
                implementation kotlin('test-js')
            }
        }
    }
}

tasks.jacocoTestReport {

    classDirectories.setFrom("${buildDir}/classes/kotlin/jvm/")
    sourceDirectories.setFrom(files("src/commonMain/kotlin", "src/jvmMain/kotlin"))

    executionData.setFrom(files("${buildDir}/jacoco/jvmTest.exec"))

    reports {
        xml.enabled true
        html.enabled true
    }
}

spotless {
    kotlin {
        licenseHeader '/*\n' +
                ' * Licensed under the Apache License, Version 2.0 (the "License");\n' +
                ' * you may not use this file except in compliance with the License.\n' +
                ' * You may obtain a copy of the License at\n' +
                ' *\n' +
                ' *  http://www.apache.org/licenses/LICENSE-2.0\n' +
                ' *\n' +
                ' * Unless required by applicable law or agreed to in writing,\n' +
                ' * software distributed under the License is distributed on an\n' +
                ' * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n' +
                ' * KIND, either express or implied.  See the License for the\n' +
                ' * specific language governing permissions and limitations\n' +
                ' * under the License. \n' +
                ' */\n' +
                '\n'
    }
}

ext.releaseRepository = 'https://artifacts.itemis.cloud/repository/maven-mps-releases'
ext.snapshotRepository = 'https://artifacts.itemis.cloud/repository/maven-mps-snapshots'
ext.publishingRepository = version.toString().endsWith("-SNAPSHOT") ? snapshotRepository : releaseRepository

def getGithubCredentials() {
    if (project.hasProperty("gpr.user") && project.hasProperty("gpr.key")) {
        return [project.findProperty("gpr.user"), project.findProperty("gpr.key")]
    }

    if (System.getenv("GITHUB_ACTOR") != null && System.getenv("GITHUB_TOKEN") != null) {
        return [System.getenv("GITHUB_ACTOR"), System.getenv("GITHUB_TOKEN")]
    }

    return null
}

publishing {
    repositories {
        maven {
            url publishingRepository
            if (project.hasProperty('artifacts.itemis.cloud.user')) {
                credentials {
                    username project.findProperty('artifacts.itemis.cloud.user')
                    password project.findProperty('artifacts.itemis.cloud.pw')
                }
            }
        }
        def githubCredentials = getGithubCredentials()
        if (githubCredentials != null) {
            maven {
                name = "GitHubPackages"
                url = "https://maven.pkg.github.com/modelix/model-api"
                credentials {
                    username = githubCredentials[0]
                    password = githubCredentials[1]
                }
            }
        }
    }
}
